stcI_HASH : Module_Name
stcI_EXTENSION : cpp
stcI_FILEPREFIX : I
stcI_FILEPOSTFIX : ManagerService
Set : $iterate_comments = OFF
SetI : $MODULENAME = KEY
/*
 *   This software is copyright protected and proprietary to
 *   LG electronics. LGE grants to you only those rights as
 *   set out in the license conditions. All other rights remain
 *   with LG electronics.
 * \author  Jong Kyung Byun
 * \date    2017.11.14
 * \attention Copyright (c) 2015 by LG electronics co, Ltd. All rights reserved.
 */

#define LOG_TAG "I+<+$MODULENAME+>+ManagerService"
#include "Log.h"

#include <binder/Parcel.h>

#include "services/+<+$MODULENAME+>+ManagerService/I+<+$MODULENAME+>+ManagerService.h"


#include "Typedef.h"
#include "utils/Handler.h"
#include <binder/BinderService.h>
#include <utils/RefBase.h>





enum
{
    OP_REGISTER_RECEIVER = android::IBinder::FIRST_CALL_TRANSACTION,
    OP_REGISTER_UNREGISTER,
    OP_REGISTER_REQUESTDATAID,
    OP_REGISTER_RESPONSEDATAID,
    OP_REGISTER_SLDDREQUEST_DATAID,
    OP_REGISTER_SLDDRESPONSE_DATAID,


	/*!! enum wishtoUseAPI auto CGA start-------------------------------------------------*/

ITERATE %API +<<+ ITKEY  ITVALUE
	OP_REGISTER_+<+uc(ITKEY)+>+,
+>>+

	/*!! enum wishtoUseAPI auto CGA end-------------------------------------------------*/

    OP_REGISTER_SLDD
};

class Bp+<+$MODULENAME+>+ManagerService: public android::BpInterface<I+<+$MODULENAME+>+ManagerService>
{
public:
    explicit Bp+<+$MODULENAME+>+ManagerService(const android::sp<android::IBinder>& impl) :
            BpInterface<I+<+$MODULENAME+>+ManagerService>(impl)
    {
    }

    virtual error_t attachReceiver(serviceid_t id, android::sp<I+<+$MODULENAME+>+ManagerReceiver>& receiver)
    {
        Parcel data;
        Parcel reply;
        (void)data.writeInterfaceToken(I+<+$MODULENAME+>+ManagerService::getInterfaceDescriptor());
        LOGV("BP registerReceiver");

        (void)data.writeInt32(id);
        data.writeStrongBinder(android::IInterface::asBinder(receiver));
        (void)remote()->transact(OP_REGISTER_RECEIVER, data, &reply);
        return reply.readInt32();
    }

    virtual error_t unregisterReceiver( const android::sp<I+<+$MODULENAME+>+ManagerReceiver>& receiver)
    {
        Parcel data;
        Parcel reply;
        (void)data.writeInterfaceToken(I+<+$MODULENAME+>+ManagerService::getInterfaceDescriptor());
        LOGV("BP registerReceiver");
        data.writeStrongBinder(android::IInterface::asBinder(receiver));
        (void)remote()->transact(OP_REGISTER_UNREGISTER, data, &reply);
        return reply.readInt32();
    }

    virtual error_t requestDataID(android::sp<+<+$MODULENAME+>+Data>& mdiagData)
    {
        Parcel data;
        Parcel reply;

        LOGV("requestDataID ");
        (void)data.writeInterfaceToken(I+<+$MODULENAME+>+ManagerService::getInterfaceDescriptor());
        (void)mdiagData->writeToParcel(&data);


        (void)remote()->transact(OP_REGISTER_REQUESTDATAID, data, &reply);

        return reply.readInt32();
    }

    virtual error_t responseDataID (android::sp<+<+$MODULENAME+>+Data>& mdiagData)
    {
        Parcel data;
        Parcel reply;

        LOGV("responseDataID");

        (void)data.writeInterfaceToken(I+<+$MODULENAME+>+ManagerService::getInterfaceDescriptor());
        (void)mdiagData->writeToParcel(&data);

        (void)remote()->transact(OP_REGISTER_RESPONSEDATAID, data, &reply);


        return reply.readInt32();;
}

    virtual android::sp<Buffer> SLDDRequestDataID (uint16_t  request_id)
    {
        Parcel data;
        Parcel reply;
        (void)data.writeInterfaceToken(I+<+$MODULENAME+>+ManagerService::getInterfaceDescriptor());
        (void)data.writeInt32(request_id);
        LOGV("SLDDRequestDataID");
        (void)remote()->transact(OP_REGISTER_SLDDREQUEST_DATAID, data, &reply);
        error_t successtoget = reply.readInt32();
        android::sp<Buffer> buf = NULL;
        if(successtoget == E_OK){
           buf = new Buffer();
           buf->setSize(reply.readInt32());
           reply.read(buf->data(), buf->size());
        }


        return buf;
    }

    virtual error_t SLDDResponseDataID (uint16_t request_id, android::sp<Buffer> buf)
    {
        Parcel data;
        Parcel reply;

        LOGV("SLDDResponseDataID");
        (void)data.writeInterfaceToken(I+<+$MODULENAME+>+ManagerService::getInterfaceDescriptor());
        (void)data.writeInt32(request_id);

        if(buf->size()>0){
            (void)data.writeInt32(buf->size());
            (void)data.write(buf->data(), buf->size());
        }
        (void)remote()->transact(OP_REGISTER_SLDDRESPONSE_DATAID, data, &reply);
        error_t successtoget = reply.readInt32();
        return successtoget;
    }

    virtual error_t SlddTestCmd(uint8_t id, uint8_t cmd, uint8_t cmd2, android::sp<Buffer> buf)
    {
        LOGV("BP_SLDD Test CMD");
        Parcel data;
        Parcel reply;
        (void)data.writeInterfaceToken(I+<+$MODULENAME+>+ManagerService::getInterfaceDescriptor());
        (void)data.writeInt32(id);
        (void)data.writeInt32(cmd);
        (void)data.writeInt32(cmd2);
        (void)data.writeInt32(buf->size());
        (void)data.write(buf->data(), buf->size());

        (void)remote()->transact(OP_REGISTER_SLDD, data, &reply);

        return reply.readInt32();
    }


/*!! wishtoUseAPI func auto CGA start-------------------------------------------------*/

ITERATE %API +<<+ ITKEY  ITVALUE
virtual error_t ITKEY(android::sp<+<+$MODULENAME+>+Data>& mdiagData)
  {
	  Parcel data;
	  Parcel reply;

	  LOGV("ITKEY ");
	  (void)data.writeInterfaceToken(I+<+$MODULENAME+>+ManagerService::getInterfaceDescriptor());
	  (void)mdiagData->writeToParcel(&data);


	  (void)remote()->transact(OP_REGISTER_+<+uc(ITKEY)+>+, data, &reply);

	  return reply.readInt32();
  }

+>>+

/*!! wishtoUseAPI func auto CGA end-------------------------------------------------*/






};

IMPLEMENT_META_INTERFACE(+<+$MODULENAME+>+ManagerService, "service_layer.I+<+$MODULENAME+>+ManagerService");

// ----------------------------------------------------------------------

android::status_t Bn+<+$MODULENAME+>+ManagerService::onTransact(uint32_t code, const Parcel& data, Parcel* reply, uint32_t flags)
{
    switch (code) {
        case OP_REGISTER_RECEIVER: {
            LOGV("BN_OP_REGISTER_RECEIVER");
            CHECK_INTERFACE(I+<+$MODULENAME+>+ManagerService, data, reply);
            appid_t id = data.readInt32();
            android::sp<I+<+$MODULENAME+>+ManagerReceiver> receiver = android::interface_cast<I+<+$MODULENAME+>+ManagerReceiver>(data.readStrongBinder());
            int32_t result = attachReceiver(id, receiver);
            (void)reply->writeInt32(result);
        }
            break;

        case OP_REGISTER_UNREGISTER: {
            LOGV("BN_OP_REGISTER_UNREGISTER");
            CHECK_INTERFACE(I+<+$MODULENAME+>+ManagerService, data, reply);
            android::sp<I+<+$MODULENAME+>+ManagerReceiver> mReceiver = android::interface_cast<I+<+$MODULENAME+>+ManagerReceiver>(data.readStrongBinder());
            int32_t result =  unregisterReceiver(mReceiver);
            (void)reply->writeInt32(result);
        }
            break;

        case OP_REGISTER_REQUESTDATAID: {
            LOGV("OP_REGISTER_REQUESTDATAID");
            CHECK_INTERFACE(I+<+$MODULENAME+>+ManagerService, data, reply);
            android::sp<+<+$MODULENAME+>+Data> diagData = new +<+$MODULENAME+>+Data();
            diagData->readFromParcel((const android::Parcel&)data);
            (void)reply->writeInt32(requestDataID(diagData));
        }
            break;

        case OP_REGISTER_RESPONSEDATAID: {
            LOGV("OP_REGISTER_RESPONSEDATAID");
            CHECK_INTERFACE(I+<+$MODULENAME+>+ManagerService, data, reply);
            android::sp<+<+$MODULENAME+>+Data> diagData = new +<+$MODULENAME+>+Data();
            diagData->readFromParcel((const android::Parcel&)data);
            (void)reply->writeInt32(responseDataID(diagData));
        }
            break;

        case OP_REGISTER_SLDDREQUEST_DATAID: {
            LOGV("OP_REGISTER_SLDDGetDATAID ");
            CHECK_INTERFACE(I+<+$MODULENAME+>+ManagerService, data, reply);
            uint32_t state = data.readInt32();
            android::sp<Buffer> buf ;

            buf = SLDDRequestDataID(state);

            (void)reply->writeInt32(E_OK);
            (void)reply->writeInt32(buf->size());
            if(buf->size()>0){
                reply->write(buf->data(), buf->size());
            }
            LOGV("OP_REGISTER_SLDDREQUESTDATAID break");
    }
            break;

        case OP_REGISTER_SLDDRESPONSE_DATAID: {
            LOGV("OP_REGISTER_SLDDRESPONSE_DATAID");
            CHECK_INTERFACE(I+<+$MODULENAME+>+ManagerService, data, reply);
            android::sp<Buffer> buf = new Buffer();
            uint32_t state = data.readInt32();
            error_t results = E_OK;

            buf->setSize(data.readInt32());
            data.read(buf->data(), buf->size());

            results = SLDDResponseDataID(state, buf);

            (void)reply->writeInt32(results);
        }
            break;

        case OP_REGISTER_SLDD: {
           LOGV("BN_OP_REGISTER_SLDD");
           CHECK_INTERFACE(I+<+$MODULENAME+>+ManagerService, data, reply);
           uint8_t id = data.readInt32();
           uint8_t cmd = data.readInt32();
           uint8_t cmd2 = data.readInt32();
           int32_t len = data.readInt32();
           android::sp<Buffer> buf = new Buffer();
           buf->setSize(len);
           data.read(buf->data(), len);
           LOGV("BN id[%d] cmd[%d] cmd2[%d]", id, cmd, cmd2);
           uint32_t result = SlddTestCmd(id, cmd, cmd2, buf);
           (void)reply->writeInt32(result);
       }
           break;

		   
		   
/*!! wishtoUseAPI IMPLEMENT_META_INTERFACE auto CGA start-------------------------------------------------*/
ITERATE %API +<<+ ITKEY  ITVALUE
		case OP_REGISTER_+<+uc(ITKEY)+>+: {
			 LOGV("ITKEY");
			 CHECK_INTERFACE(I+<+$MODULENAME+>+ManagerService, data, reply);
			 android::sp<+<+$MODULENAME+>+Data> diagData = new +<+$MODULENAME+>+Data();
			 diagData->readFromParcel((const android::Parcel&)data);
			 (void)reply->writeInt32(ITKEY(diagData));
		 }
			 break;
+>>+

/*!! wishtoUseAPI IMPLEMENT_META_INTERFACE auto CGA end-------------------------------------------------*/

        default:
            return android::BBinder::onTransact(code, data, reply, flags);
    }

    return E_OK;
}

//**********************************************************************************************

