stcI_HASH : Module_Name
stcI_FILEPREFIX : KEYManagerService/include/
stcI_FILEPOSTFIX : Manager
stcI_EXTENSION : h
Set : $iterate_comments = OFF
SetI : $MODULENAME = KEY
/**
 * @copyright
 * Copyright (c) 2015 by LG Electronics Inc.
 * This program or software including the accompanying associated documentation
 * ("Software") is the proprietary software of LG Electronics Inc. and or its
 * licensors, and may only be used, duplicated, modified or distributed pursuant
 * to the terms and conditions of a separate written license agreement between you
 * and LG Electronics Inc. ("Authorized License"). Except as set forth in an
 * Authorized License, LG Electronics Inc. grants no license (express or implied),
 * rights to use, or waiver of any kind with respect to the Software, and LG
 * Electronics Inc. expressly reserves all rights in and to the Software and all
 * intellectual property therein. If you have no Authorized License, then you have
 * no rights to use the Software in any ways, and should immediately notify LG
 * Electronics Inc. and discontinue all use of the Software.
 *
 * @file        +<+ucfirst("$MODULENAME")+>+Manager.cpp
 * @brief       Implementation of +<+ucfirst("$MODULENAME")+>+Manager
 * @authors:
 *    copyright (c) 2017  jongkyung.byun <jongkyung.byun@lge.com>
*/


#ifndef _TIGER_SDK_+<+ucfirst("$MODULENAME")+>+MANAGER_H_
#define _TIGER_SDK_+<+ucfirst("$MODULENAME")+>+MANAGER_H_

#include "Error.h"
#include "Log.h"
#include <utils/SLLooper.h>
#include <utils/Handler.h>
#include <binder/IServiceManager.h>
#include "I+<+ucfirst("$MODULENAME")+>+ManagerServiceType.h"
#include "I+<+ucfirst("$MODULENAME")+>+ManagerService.h"
#include <utils/RefBase.h>
#include <list>

class +<+ucfirst("$MODULENAME")+>+Manager : public android::RefBase
{
	public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS 
	    virtual ~+<+ucfirst("$MODULENAME")+>+Manager();
#endif 
	    static +<+ucfirst("$MODULENAME")+>+Manager* instance();
		
		error_t responseDataID (android::sp<+<+ucfirst("$MODULENAME")+>+Data>& m+<+lc($MODULENAME)+>+Data);
		error_t attachReceiver(serviceid_t id, android::sp<I+<+ucfirst("$MODULENAME")+>+ManagerReceiver> receiver);
		error_t unregisterReceiver( const android::sp<I+<+ucfirst("$MODULENAME")+>+ManagerReceiver> receiver);
		error_t	reAttachReceiver (const uint32_t id );
		error_t	requestDataID(android::sp<+<+ucfirst("$MODULENAME")+>+Data>& m+<+lc($MODULENAME)+>+Data);

ITERATE %API +<<+ ITKEY  ITVALUE
		error_t ITKEY(android::sp<+<+ucfirst($MODULENAME)+>+Data>& m+<+ucfirst($MODULENAME)+>+Data);
+>>+

#ifndef DOXYGEN_SHOULD_SKIP_THIS
	    void onBinderDied(const android::wp<android::IBinder>& who);
#endif

	private:
	    +<+ucfirst("$MODULENAME")+>+Manager();
	    android::sp<I+<+ucfirst("$MODULENAME")+>+ManagerService> getService();

	    class ManagerDeathRecipient : public android::IBinder::DeathRecipient
	    {
		    public:
		        explicit ManagerDeathRecipient(+<+ucfirst("$MODULENAME")+>+Manager& parent) : mParent(parent) {}
		        virtual ~ManagerDeathRecipient() {}
		        virtual void binderDied(const android::wp<android::IBinder>& who) {
		            mParent.onBinderDied(who);
		        }
		    private:
		        +<+ucfirst("$MODULENAME")+>+Manager& mParent;
	    };

#ifndef DOXYGEN_SHOULD_SKIP_THIS
	private:
	    static bool DEBUG;
#endif

	private:
	    static +<+ucfirst("$MODULENAME")+>+Manager* mInstance;
	    android::sp<android::IBinder> mToken;
	    android::sp<ManagerDeathRecipient> mDeathRecipient;
	    android::sp<I+<+ucfirst("$MODULENAME")+>+ManagerService> m+<+ucfirst("$MODULENAME")+>+Service;
	    android::sp<I+<+ucfirst("$MODULENAME")+>+ManagerReceiver> mStateReceiver;
		std::list<int32_t>	signal_list;
};
#endif //_TIGER_SDK_+<+ucfirst("$MODULENAME")+>+MANAGER_H_
