stcI_HASH : Module_Name
stcI_FILEPREFIX : KEYManagerService/src/
stcI_FILEPOSTFIX : ManagerService
stcI_EXTENSION : cpp
Set : $iterate_comments = OFF
SetI : $MODULENAME = KEY
/*
 *   This software is copyright protected and proprietary to
 *   LG electronics. LGE grants to you only those rights as
 *   set out in the license conditions. All other rights remain
 *   with LG electronics.
 * \author  Jong Kyung Byun
 * \date    2017.11.14
 * \attention Copyright (c) 2015 by LG electronics co, Ltd. All rights reserved.
 */

#define LOG_TAG "+<+ucfirst($MODULENAME)+>+ManagerService"

#include <Log.h>
#include <binder/IServiceManager.h>
#include "+<+ucfirst($MODULENAME)+>+ManagerService.h"

+<+ucfirst($MODULENAME)+>+ManagerService::+<+ucfirst($MODULENAME)+>+ManagerService() :      SystemService(+<+ucfirst($MODULENAME)+>+ManagerService::getServiceName()) {}

+<+ucfirst($MODULENAME)+>+ManagerService::~+<+ucfirst($MODULENAME)+>+ManagerService() {}

error_t +<+ucfirst($MODULENAME)+>+ManagerService::dump(LogOutput&)
{
	return E_OK;
}

bool +<+ucfirst($MODULENAME)+>+ManagerService::onInit()
{
	LOGV("onInit");

	mReceiverDeathRecipient = new ReceiverDeathRecipient(*this);

	return false;
}

void +<+ucfirst($MODULENAME)+>+ManagerService::instantiate()
{
	LOGV("instantiate");
	android::defaultServiceManager()->addService(android::String16(+<+ucfirst($MODULENAME)+>+ManagerService::getServiceName()), new ServiceStub(*this));
}

error_t +<+ucfirst($MODULENAME)+>+ManagerService::onStart(void)
{
	LOGV("Onstart");
	error_t ret = E_OK;

	m+<+ucfirst($MODULENAME)+>+InputMgr = new +<+ucfirst($MODULENAME)+>+InputManager(this);
	ret = m+<+ucfirst($MODULENAME)+>+InputMgr->init();

	SystemService::onStart();

	return ret;
}

error_t +<+ucfirst($MODULENAME)+>+ManagerService::onStop()
{
	return E_OK;
}

error_t +<+ucfirst($MODULENAME)+>+ManagerService::attachReceiver(serviceid_t id, sp<I+<+ucfirst($MODULENAME)+>+ManagerReceiver>& receiver)
{

    LOGV("attachReceiver(), id = [%2x]", id);
    if(receiver == NULL) {
        LOGE("attachReceiver(), receiver is null");
        return E_ERROR;
    }

    Mutex::Autolock _l(mReceiverLock);
    auto &receivers = mReceivers[id];

    // check duplication
    for(auto &r: receivers) {
        if(android::IInterface::asBinder(r) == android::IInterface::asBinder(receiver)) {
            LOGE("attachReceiver(), existed");
            return E_ERROR;
        }
    }
    android::IInterface::asBinder(receiver)->linkToDeath(mReceiverDeathRecipient);
    receivers.push_back(receiver);

    return E_OK;
}

error_t +<+ucfirst($MODULENAME)+>+ManagerService::unregisterReceiver(const sp<I+<+ucfirst($MODULENAME)+>+ManagerReceiver>& receiver) {
    LOGV("unregisterReceiver()");

    Mutex::Autolock _l(mReceiverLock);
    for(auto &receivers: mReceivers) {
        for(const auto r: receivers.second) {
            if(android::IInterface::asBinder(r) == android::IInterface::asBinder(receiver)) {
                android::IInterface::asBinder(r)->unlinkToDeath(mReceiverDeathRecipient);
                receivers.second.remove(r);
                return E_OK;
            }
        }
    }

    LOGE("+<+ucfirst($MODULENAME)+>+Mgr unregisterReceiver(), no hit");
    return E_ERROR;
}

void +<+ucfirst($MODULENAME)+>+ManagerService::onReceiverBinderDied(const android::wp<android::IBinder>& who) {
    LOGE("onReceiverBinderDied()");

    Mutex::Autolock _l(mReceiverLock);
    for(auto &receivers: mReceivers) {
        for(const auto r: receivers.second) {
            if(android::IInterface::asBinder(r) == who) {
                LOGE("onReceiverBinderDied(), remove died receiver");
                receivers.second.remove(r);
                return;
            }
        }
    }
}

error_t +<+ucfirst($MODULENAME)+>+ManagerService::queryReceiverById(appid_t id, android::sp<+<+ucfirst($MODULENAME)+>+Data>& m+<+ucfirst($MODULENAME)+>+Data)
{
	Mutex::Autolock _l(mReceiverLock);

	error_t result = E_ERROR;
	for (const auto s: mReceivers) {
		if (s.first == id ) {
			result = E_OK;

			for (const auto r: s.second) {
				LOGV("queryReceiverById : [%2x]", id);
				r->onReceive(m+<+ucfirst($MODULENAME)+>+Data);
			}
		}
	}

	return result;
}

error_t +<+ucfirst($MODULENAME)+>+ManagerService::requestResponseDataID(android::sp<+<+ucfirst($MODULENAME)+>+Data>& m+<+ucfirst($MODULENAME)+>+Data)
{
	LOGV("requestResponseDataID");
	error_t results = E_ERROR;

	return results;
}


error_t +<+ucfirst($MODULENAME)+>+ManagerService::ServiceStub::requestDataID(android::sp<+<+ucfirst($MODULENAME)+>+Data>& m+<+ucfirst($MODULENAME)+>+Data)
{
	LOGV("ServiceStub: requestDataID");

	return mParent.requestResponseDataID(m+<+ucfirst($MODULENAME)+>+Data);
}

error_t +<+ucfirst($MODULENAME)+>+ManagerService::ServiceStub::responseDataID (android::sp<+<+ucfirst($MODULENAME)+>+Data>& m+<+ucfirst($MODULENAME)+>+Data)
{
	LOGV("ServiceStub: responseDataID");

	return mParent.requestResponseDataID(m+<+ucfirst($MODULENAME)+>+Data);
}

error_t +<+ucfirst($MODULENAME)+>+ManagerService::ServiceStub::attachReceiver(serviceid_t id, android::sp<I+<+ucfirst($MODULENAME)+>+ManagerReceiver>& receiver)
{
	return mParent.attachReceiver(id, receiver);
}

error_t +<+ucfirst($MODULENAME)+>+ManagerService::ServiceStub::unregisterReceiver( const android::sp<I+<+ucfirst($MODULENAME)+>+ManagerReceiver>& receiver)
{
	return mParent.unregisterReceiver(receiver);
}

error_t +<+ucfirst($MODULENAME)+>+ManagerService::ServiceStub::queryReceiverById(appid_t id , android::sp<+<+ucfirst($MODULENAME)+>+Data>& m+<+ucfirst($MODULENAME)+>+Data)
{
	return mParent.queryReceiverById(id, m+<+ucfirst($MODULENAME)+>+Data);
}


// auto CGA start : wishtoUseAPI
ITERATE %API +<<+ ITKEY  ITVALUE
error_t +<+ucfirst($MODULENAME)+>+ManagerService::ServiceStub::ITKEY(
    ITERATE %API{ITKEY} +<<+ IT2KEY  IT2VALUE
        IFEQUAL( (IT2KEY eq 1)&& (IT2KEY eq 1))+{{+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData" )+{{+
                    android::sp<+<+ucfirst($MODULENAME)+>+Data>& +<+$API{ITKEY}{IT2KEY}{name}+>+
            +}}+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData" )+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
                    +<+$API{ITKEY}{IT2KEY}{type}+>+ +<+$API{ITKEY}{IT2KEY}{name}+>+  
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
                    size_t +<+$API{ITKEY}{IT2KEY}{Len}+>+  
                    , +<+$API{ITKEY}{IT2KEY}{type}+>+ +<+$API{ITKEY}{IT2KEY}{name}+>+  
                +}}+
            +}}+
        +}}+
        IFEQUAL(IT2KEY ne 1)+{{+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData" )+{{+
                    , android::sp<+<+ucfirst($MODULENAME)+>+Data>& +<+$API{ITKEY}{IT2KEY}{name}+>+
            +}}+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData" )+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
                    , +<+$API{ITKEY}{IT2KEY}{type}+>+ +<+$API{ITKEY}{IT2KEY}{name}+>+  
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
                    , size_t +<+$API{ITKEY}{IT2KEY}{Len}+>+  
                    , +<+$API{ITKEY}{IT2KEY}{type}+>+ +<+$API{ITKEY}{IT2KEY}{name}+>+  
                +}}+
            +}}+
        +}}+
    +>>+
    )
{
	LOGV("ServiceStub: ITKEY");

	// implement your code

	return E_OK;
}
+>>+

// auto CGA end : wishtoUseAPI

/*
 * SLDD Use ONLY
 * */
#ifdef +<+uc($MODULENAME)+>+_SLDD_TEST
error_t +<+ucfirst($MODULENAME)+>+ManagerService::SlddTestCmd(uint8_t id, uint8_t cmd, uint8_t cmd2, android::sp<Buffer> buf)
{
	return E_OK;
}

android::sp<Buffer> +<+ucfirst($MODULENAME)+>+ManagerService::SLDDRequestDataID(uint16_t index)
{
	LOGV("SLDDRequestDataID start");
	error_t results = E_OK;

    int bufsize = 12;
    uint8_t dataValue[bufsize] = {0,};
    android::sp<Buffer> buf = new Buffer();

    dataValue[0] = (uint8_t)index;
    dataValue[1] = index>>8;
    dataValue[2] = 0x01;
    dataValue[3] = 0x00;
    dataValue[4] = 0x01;
    dataValue[6] = 0x01;  
    buf->setSize(bufsize);
    buf->setTo(dataValue,bufsize);

    results = m+<+ucfirst($MODULENAME)+>+InputMgr->messagefromVIF(index, buf);

	return buf;
}

error_t +<+ucfirst($MODULENAME)+>+ManagerService::SLDDResponseDataID(uint16_t request_id, android::sp<Buffer>  buf)
{
	LOGV("SLDDResponseDataID");
	error_t results = E_OK;

	return results;
}

error_t +<+ucfirst($MODULENAME)+>+ManagerService::ServiceStub::SlddTestCmd(uint8_t id, uint8_t cmd, uint8_t cmd2, android::sp<Buffer> buf)
{
	return mParent.SlddTestCmd(id, cmd, cmd2, buf);
}

android::sp<Buffer> +<+ucfirst($MODULENAME)+>+ManagerService::ServiceStub::SLDDRequestDataID(uint16_t index)
{
	LOGV("ServiceStub: SLDDRequestDataID");

	return mParent.SLDDRequestDataID(index);
}

error_t +<+ucfirst($MODULENAME)+>+ManagerService::ServiceStub::SLDDResponseDataID (uint16_t request_id, android::sp<Buffer> buf)
{
	LOGV("ServiceStub: SLDDResponseDataID");

	return mParent.SLDDResponseDataID(request_id, buf);
}

bool +<+ucfirst($MODULENAME)+>+ManagerService::isApplicationExecuted(appid_t id)
{
    Mutex::Autolock _l(mReceiverLock);
    bool result = false;
    for (const auto s: mReceivers) {
        if (s.first == id) {
            for (const auto r: s.second) {
                LOGV("+<+ucfirst($MODULENAME)+>+ isApplicationExecuted : [%2x]", id);
                result = true;
            }
        }
    }

    return result;
}

#endif

