stcI_HASH : Module_Name
stcI_FILEPREFIX : source/KEYManagerService/lib/I
stcI_FILEPOSTFIX : ManagerReceiver
stcI_EXTENSION : cpp
Set : $iterate_comments = OFF
SetI : $MODULENAME = KEY
/*
 *   This software is copyright protected and proprietary to
 *   LG electronics. LGE grants to you only those rights as
 *   set out in the license conditions. All other rights remain
 *   with LG electronics.
 * \author  Jong Kyung Byun
 * \date    2017.11.14
 * \attention Copyright (c) 2015 by LG electronics co, Ltd. All rights reserved.
 */

#define LOG_TAG "Bp+<+$MODULENAME+>+ManagerReceiver"

#include <binder/Parcel.h>

#include "../include/I+<+$MODULENAME+>+ManagerReceiver.h"

#include "Log.h"

enum
{
    TRANSACT_ONRECEIVE = android::IBinder::FIRST_CALL_TRANSACTION,
    TRANSACT_+<+uc($MODULENAME)+>+_COMMAND
};

class Bp+<+$MODULENAME+>+ManagerReceiver: public android::BpInterface<I+<+$MODULENAME+>+ManagerReceiver>
{
public:
    Bp+<+$MODULENAME+>+ManagerReceiver(const android::sp<android::IBinder>& impl) :
            BpInterface<I+<+$MODULENAME+>+ManagerReceiver>(impl)
    {
    }

    virtual void onReceive(android::sp<+<+$MODULENAME+>+Data>& m+<+$MODULENAME+>+Data)
    {
                android::Parcel data;
                android::Parcel reply;

                LOGV("onReceive start");

                (void)data.writeInterfaceToken(I+<+$MODULENAME+>+ManagerReceiver::getInterfaceDescriptor());
                (void)m+<+$MODULENAME+>+Data->writeToParcel(&data);

                (void)remote()->transact(TRANSACT_ONRECEIVE, data, &reply);

                LOGV("onReceive end");
        }

    virtual void on+<+$MODULENAME+>+cmd(int32_t id, uint8_t type, uint8_t cmd, uint8_t cmd2, android::sp<Buffer>& buf)
    {
        LOGV("BP_on+<+$MODULENAME+>+cmd");
        android::Parcel data;
        android::Parcel reply;
        (void)data.writeInterfaceToken(I+<+$MODULENAME+>+ManagerReceiver::getInterfaceDescriptor());

        (void)data.writeInt32(id);
        (void)data.writeInt32(type);
        (void)data.writeInt32(cmd);
        (void)data.writeInt32(cmd2);
        (void)data.writeInt32(buf->size());
        (void)data.write(buf->data(), buf->size());

        (void)remote()->transact(TRANSACT_+<+uc($MODULENAME)+>+_COMMAND, data, &reply, android::IBinder::FLAG_ONEWAY);
    }

};

IMPLEMENT_META_INTERFACE(+<+$MODULENAME+>+ManagerReceiver, "service_layer.I+<+$MODULENAME+>+ManagerReceiver");

// ----------------------------------------------------------------------

android::status_t Bn+<+$MODULENAME+>+ManagerReceiver::onTransact(uint32_t code, const android::Parcel& data, android::Parcel* reply, uint32_t flags)
{
    switch (code) {
        case TRANSACT_ONRECEIVE:
        {
            LOGV("TRANSACT_ONRECEIVE");
            CHECK_INTERFACE(I+<+$MODULENAME+>+ManagerReceiver, data, reply);
           // error_t results = E_OK;

            android::sp<+<+$MODULENAME+>+Data> +<+$MODULENAME+>+Data = new +<+$MODULENAME+>+Data();
            +<+$MODULENAME+>+Data->readFromParcel((const android::Parcel&)data);

            onReceive(+<+$MODULENAME+>+Data);
            break;
        }

        case TRANSACT_+<+uc($MODULENAME)+>+_COMMAND: {
            CHECK_INTERFACE(I+<+$MODULENAME+>+ManagerReceiver, data, reply);
            int32_t id = data.readInt32();
            uint8_t type = data.readInt32();
            int32_t cmd = data.readInt32();
            int32_t cmd2 = data.readInt32();
            int32_t len = data.readInt32();
            android::sp<Buffer> buf = new Buffer();
            buf->setSize(len);
            data.read(buf->data(), len);
            on+<+$MODULENAME+>+cmd(id, type, cmd, cmd2, buf);
            LOGV("TRANSACT_+<+uc($MODULENAME)+>+_COMMAND id[%d] type[%d] cmd[%d] cmd2[%d]", id, type, cmd, cmd2);
            break;
        }
        default:
            return BBinder::onTransact(code, data, reply, flags);
    }

    return E_OK;
}

