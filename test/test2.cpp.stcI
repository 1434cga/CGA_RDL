stcI_HASH : Module_Name
stcI_FILEPREFIX : +<+lc(KEY)+>+-service/
stcI_FILEBODY : YES
stcI_FILEPOSTFIX : _test
stcI_EXTENSION : cpp
Set : $iterate_comments = OFF
SetI : $MODULENAME = KEY

/*
ITERATE %Author +<<+ ITKEY  ITVALUE
 * @author  ITKEY
+>>+
 * @date    +<+$VARIABLE{"Date"}+>+
 */

mapMod rootmod = {       // mapMod
ITERATE %Module_Name +<<+ ITKEY  ITVALUE
    {       // ITKEY : mapMod map <Argument,mapApi>
        {"ITKEY" , "+<+$Module_Name{ITKEY}{Description}+>+" , ArgumentType::Sldd , ModeType::Normal}, // ModuleName<Argument> as first item of  mapMode
        {   // mapApi as second item of mapMode
        ITERATE %API +<<+ IT2KEY  IT2VALUE
            { // ITKEY->IT2KEY : mapApi multiple items with <Argument,vector<Argument>>
                {"IT2KEY" , "+<+$API{IT2KEY}{1}{apiDescription}+>+" , ArgumentType::Sldd , ModeType::+<+$API{IT2KEY}{1}{mode}+>+ }, // api name<Argument> as first item of mapApi
                {   // argument list as second item of map Api with vector<Argument>
                ITERATE %API{IT2KEY} +<<+ IT3KEY  IT3VALUE
                    IFEQUAL( "+<+$API{IT2KEY}{IT3KEY}{type}+>+"  eq "xxData" )+{{+
                    ITERATE %xxData +<<+ XXKEY  XXVALUE
                        IFEQUAL("+<+$xxData{XXKEY}{Len}+>+"  eq "")+{{+
                            //+<+$xxData{XXKEY}{type}+>+ +<+$xxData{XXKEY}{name}+>+
                            { "+<+$xxData{XXKEY}{name}+>+", "+<+$xxData{XXKEY}{Description}+>+" , ArgumentType::+<+$ArgType1{$xxData{XXKEY}{type}}{slddType}+>+ , ModeType::Normal}, // item of vector<Argument> with order
                        +}}+
                        IFEQUAL("+<+$xxData{XXKEY}{Len}+>+"  ne "")+{{+
                            //size_t +<+$xxData{XXKEY}{Len}+>+
                            //{ "+<+$xxData{XXKEY}{Len}+>+", "size of string" , ArgumentType::Int }, // item of vector<Argument> with order
                            //, +<+$xxData{XXKEY}{type}+>+ +<+$xxData{XXKEY}{name}+>+
                            { "+<+$xxData{XXKEY}{name}+>+", "+<+$xxData{XXKEY}{Description}+>+" , ArgumentType::+<+$ArgType1{$xxData{XXKEY}{type}}{slddType}+>+ , ModeType::Normal}, // item of vector<Argument> with order
                        +}}+
                    +>>+
                            //android::sp<+<+$MODULENAME+>+Data>& +<+$API{ITKEY}{XXKEY}{name}+>+
                    +}}+
                    IFEQUAL( "+<+$API{IT2KEY}{IT3KEY}{type}+>+"  ne "xxData" )+{{+
                        IFEQUAL("+<+$API{IT2KEY}{IT3KEY}{Len}+>+"  eq "")+{{+
                            //+<+$API{IT2KEY}{IT3KEY}{type}+>+ +<+$API{IT2KEY}{IT3KEY}{name}+>+
                            { "+<+$API{IT2KEY}{IT3KEY}{name}+>+", "+<+$API{IT2KEY}{IT3KEY}{Description}+>+" , ArgumentType::+<+$ArgType1{$API{IT2KEY}{IT3KEY}{type}}{slddType}+>+ , ModeType::Normal}, // item of vector<Argument> with order
                        +}}+
                        IFEQUAL("+<+$API{IT2KEY}{IT3KEY}{Len}+>+"  ne "")+{{+
                            //size_t +<+$API{IT2KEY}{IT3KEY}{Len}+>+
                            //{ "+<+$API{IT2KEY}{IT3KEY}{Len}+>+", "size of string" , ArgumentType::Int }, // item of vector<Argument> with order
                            //, +<+$API{IT2KEY}{IT3KEY}{type}+>+ +<+$API{IT2KEY}{IT3KEY}{name}+>+
                            { "+<+$API{IT2KEY}{IT3KEY}{name}+>+", "+<+$API{IT2KEY}{IT3KEY}{Description}+>+" , ArgumentType::+<+$ArgType1{$API{IT2KEY}{IT3KEY}{type}}{slddType}+>+ , ModeType::Normal}, // item of vector<Argument> with order
                        +}}+
                    +}}+
                +>>+
                }
            },
        +>>+
        }
    },
+>>+
};



// CGA_VARIANT:__GLOBAL_SCOPE__:__YOUR_CODE__:variant START
    /*
     * Write your own additional code
     * add your #include
     * add your global declare the function and variables
     * add your function
     */
// CGA_VARIANT:__GLOBAL_SCOPE__:__YOUR_CODE__:variant END

/**
 * @brief It is a function for the destructor of the +<+$MODULENAME+>+ data class.
 *
 * @param[in] void
 * @retval   void.
 *
 */
+<+$MODULENAME+>+Data::~+<+$MODULENAME+>+Data(void)
{
ITERATE %xxData +<<+ ITKEY  ITVALUE
    IFEQUAL(+<+$xxData{ITKEY}{Len}+>+  ne "")+{{+
        if( this->+<+$xxData{ITKEY}{name}+>+ != NULL){      // size: +<+$xxData{ITKEY}{Len}+>+
            delete [] this->+<+$xxData{ITKEY}{name}+>+ ;
            this->+<+$xxData{ITKEY}{name}+>+ = NULL;
        }
    +}}+
+>>+

}

/**
 * @brief It is =operator of the +<+$MODULENAME+>+ data class.
 *
 * @param[in] other const +<+$MODULENAME+>+Data& 
 * @retval   +<+$MODULENAME+>+Data
 *
 */
+<+$MODULENAME+>+Data& +<+$MODULENAME+>+Data::operator=(const +<+$MODULENAME+>+Data& other)
{
    setTo(other);
    return *this;
}

/**
 * @brief It is function for setting data of the +<+$MODULENAME+>+ data class.
 *
ITERATE %xxData +<<+ ITKEY  ITVALUE
        IFNOTEQUAL(+<+$xxData{ITKEY}{Len}+>+  ne "")+{{+
 * @param[in] m+<+$xxData{ITKEY}{name}+>+  +<+$xxData{ITKEY}{Description}+>+ 
        +}}+
        IFEQUAL(+<+$xxData{ITKEY}{Len}+>+  ne "")+{{+
 * @param[in] m+<+$xxData{ITKEY}{Len}+>+ Length of m+<+$xxData{ITKEY}{name}+>+
 * @param[in] m+<+$xxData{ITKEY}{name}+>+ +<+$xxData{ITKEY}{Description}+>+ 
        +}}+
+>>+
 * @retval   void
 *
 */
void +<+$MODULENAME+>+Data::setData(
ITERATE %xxData +<<+ ITKEY  ITVALUE
    IFEQUAL(ITKEY eq 1)+{{+
        IFNOTEQUAL(+<+$xxData{ITKEY}{Len}+>+  ne "")+{{+
            +<+$xxData{ITKEY}{type}+>+ m+<+$xxData{ITKEY}{name}+>+
        +}}+
        IFEQUAL(+<+$xxData{ITKEY}{Len}+>+  ne "")+{{+
            size_t m+<+$xxData{ITKEY}{Len}+>+
            , +<+$xxData{ITKEY}{type}+>+ m+<+$xxData{ITKEY}{name}+>+
        +}}+
    +}}+
    IFEQUAL(ITKEY ne 1)+{{+
        IFNOTEQUAL(+<+$xxData{ITKEY}{Len}+>+  ne "")+{{+
            , +<+$xxData{ITKEY}{type}+>+ m+<+$xxData{ITKEY}{name}+>+
        +}}+
        IFEQUAL(+<+$xxData{ITKEY}{Len}+>+  ne "")+{{+
            , size_t m+<+$xxData{ITKEY}{Len}+>+
            , +<+$xxData{ITKEY}{type}+>+ m+<+$xxData{ITKEY}{name}+>+
        +}}+
    +}}+
+>>+
    //  uint16_t mDid, uint16_t mLen, uint8_t mAtt, uint8_t* mData
    )
{

ITERATE %xxData +<<+ ITKEY  ITVALUE
    IFNOTEQUAL(+<+$xxData{ITKEY}{Len}+>+  ne "")+{{+
        this->+<+$xxData{ITKEY}{name}+>+ = m+<+$xxData{ITKEY}{name}+>+ ;
    +}}+
    IFEQUAL(+<+$xxData{ITKEY}{Len}+>+  ne "")+{{+
        if( this->+<+$xxData{ITKEY}{Len}+>+ != 0){
            this->+<+$xxData{ITKEY}{name}+>+  = new  uint8_t[ m+<+$xxData{ITKEY}{Len}+>+ ];
            memcpy(this->+<+$xxData{ITKEY}{name}+>+ , m+<+$xxData{ITKEY}{name}+>+ , m+<+$xxData{ITKEY}{Len}+>+ );
        } else {
            int _mSize = 2;
            uint8_t payload[_mSize] = {0,};
            this->+<+$xxData{ITKEY}{name}+>+  = new  uint8_t[ _mSize ];
            memcpy(this->+<+$xxData{ITKEY}{name}+>+ , payload , _mSize );
            LOGV("+<+ucfirst($MODULENAME)+>+ this->+<+$xxData{ITKEY}{name}+>+ setData mthis->+<+$xxData{ITKEY}{Len}+>+ is 0");
        }
    +}}+
+>>+

}


    return E_OK;
}

enum
{
    OP_REGISTER_RECEIVER = android::IBinder::FIRST_CALL_TRANSACTION,
    OP_REGISTER_UNREGISTER,
    OP_REGISTER_REQUESTDATAID,

	/* auto __ enum wishtoUseAPI auto CGA start-------------------------------------------------*/

ITERATE %API +<<+ ITKEY  ITVALUE
	OP_REGISTER_+<+uc(ITKEY)+>+,
+>>+

	/* auto __ enum wishtoUseAPI auto CGA end-------------------------------------------------*/

    OP_REGISTER_RESPONSEDATAID
};

ITERATE %API +<<+ ITKEY  ITVALUE
    virtual error_t ITKEY(
    ITERATE %API{ITKEY} +<<+ IT2KEY  IT2VALUE
        IFEQUAL( (IT2KEY eq 1)&& (IT2KEY eq 1))+{{+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData") )+{{+
                    android::sp<+<+$MODULENAME+>+Data>& +<+$API{ITKEY}{IT2KEY}{name}+>+
            +}}+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData") )+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
                    +<+$API{ITKEY}{IT2KEY}{type}+>+ +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
                    size_t +<+$API{ITKEY}{IT2KEY}{Len}+>+
                    , +<+$API{ITKEY}{IT2KEY}{type}+>+ +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
            +}}+
        +}}+
        IFEQUAL(IT2KEY ne 1)+{{+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData") )+{{+
                    , android::sp<+<+$MODULENAME+>+Data>& +<+$API{ITKEY}{IT2KEY}{name}+>+
            +}}+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData") )+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
                    , +<+$API{ITKEY}{IT2KEY}{type}+>+ +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
                    , size_t +<+$API{ITKEY}{IT2KEY}{Len}+>+
                    , +<+$API{ITKEY}{IT2KEY}{type}+>+ +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
            +}}+
        +}}+
    +>>+
        )
    {
	    Parcel data;
	    Parcel reply;

	    LOGV("ITKEY ");
	    (void)data.writeInterfaceToken(I+<+ucfirst($MODULENAME)+>+ManagerService::getInterfaceDescriptor());
        ITERATE %API{ITKEY} +<<+ IT2KEY  IT2VALUE
            IFEQUAL("+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData")+{{+
	                (void)+<+$API{ITKEY}{IT2KEY}{name}+>+->writeToParcel(&data);
            +}}+
            IFEQUAL("+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData")+{{+
                IFEQUAL( ("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "") && (+<+$API{ITKEY}{IT2KEY}{name}+>+ ne "") )+{{+
                    (void)data.+<+$ArgType1{$API{ITKEY}{IT2KEY}{type}}{write}+>+ ( +<+$API{ITKEY}{IT2KEY}{name}+>+ );
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
                    (void)data.+<+$ArgType1{$API{ITKEY}{IT2KEY}{type}}{write}+>+ ( +<+$API{ITKEY}{IT2KEY}{Len}+>+ , +<+$API{ITKEY}{IT2KEY}{name}+>+ );
                +}}+
            +}}+
        +>>+


	    (void)remote()->transact(OP_REGISTER_+<+uc(ITKEY)+>+, data, &reply);

	    return reply.readInt32();
    }

+>>+


/* auto __ wishtoUseAPI IMPLEMENT_META_INTERFACE auto CGA start-------------------------------------------------*/
ITERATE %API +<<+ ITKEY  ITVALUE
		case OP_REGISTER_+<+uc(ITKEY)+>+: {
            // declare the temporary variable with _local_
    ITERATE %API{ITKEY} +<<+ IT2KEY  IT2VALUE
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData") )+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
                    +<+$API{ITKEY}{IT2KEY}{type}+>+  _local_+<+$API{ITKEY}{IT2KEY}{name}+>+ ;
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
                    size_t  _local_+<+$API{ITKEY}{IT2KEY}{Len}+>+  = 0  ;
                    +<+$API{ITKEY}{IT2KEY}{type}+>+  _local_+<+$API{ITKEY}{IT2KEY}{name}+>+ = NULL  ;
                +}}+
            +}}+
    +>>+

			 LOGV("ITKEY");
			 CHECK_INTERFACE(I+<+ucfirst($MODULENAME)+>+ManagerService, data, reply);
        ITERATE %API{ITKEY} +<<+ IT2KEY  IT2VALUE
            IFEQUAL("+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData")+{{+
			        android::sp<+<+$MODULENAME+>+Data> m+<+$MODULENAME+>+Data = new +<+$MODULENAME+>+Data();
			        m+<+$MODULENAME+>+Data->readFromParcel((const android::Parcel&)data);
            +}}+
            IFEQUAL("+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData")+{{+
                IFEQUAL( ("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "") && (+<+$API{ITKEY}{IT2KEY}{name}+>+ ne "") )+{{+
                    _local_+<+$API{ITKEY}{IT2KEY}{name}+>+  = static_cast<+<+$API{ITKEY}{IT2KEY}{type}+>+>( data.+<+$ArgType1{$API{ITKEY}{IT2KEY}{type}}{read}+>+() ); // ? need static_cast
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
                    _local_+<+$API{ITKEY}{IT2KEY}{Len}+>+  = data.readInt32();
                    if( (_local_+<+$API{ITKEY}{IT2KEY}{Len}+>+  < 0) || ( _local_+<+$API{ITKEY}{IT2KEY}{name}+>+  == NULL) ){
		                LOGE("error: _local_+<+$API{ITKEY}{IT2KEY}{Len}+>+  < 0  or  _local_+<+$API{ITKEY}{IT2KEY}{name}+>+  == NULL");
                        return E_ERROR;
                    }

		            if(_local_+<+$API{ITKEY}{IT2KEY}{name}+>+ == NULL){
		                        _local_+<+$API{ITKEY}{IT2KEY}{name}+>+  = new  uint8_t[ _local_+<+$API{ITKEY}{IT2KEY}{Len}+>+ ];
		            }
		            else { LOGE("error: this routine is not reached\n"); }

                    data.read( _local_+<+$API{ITKEY}{IT2KEY}{name}+>+ , _local_+<+$API{ITKEY}{IT2KEY}{Len}+>+ );
                +}}+
            +}}+
        +>>+

			 (void)reply->writeInt32(
                ITKEY(
    ITERATE %API{ITKEY} +<<+ IT2KEY  IT2VALUE
        IFEQUAL( (IT2KEY eq 1)&& (IT2KEY eq 1))+{{+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData") )+{{+
			        m+<+$MODULENAME+>+Data
            +}}+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData") )+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
                    _local_+<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
                    _local_+<+$API{ITKEY}{IT2KEY}{Len}+>+
                    , _local_+<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
            +}}+
        +}}+
        IFEQUAL(IT2KEY ne 1)+{{+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData") )+{{+
			        , m+<+$MODULENAME+>+Data
            +}}+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData") )+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
                    , _local_+<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
                    , _local_+<+$API{ITKEY}{IT2KEY}{Len}+>+
                    , _local_+<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
            +}}+
        +}}+
    +>>+
                )
            );

            // free : if datalen exists.
        ITERATE %API{ITKEY} +<<+ IT2KEY  IT2VALUE
            IFEQUAL("+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData")+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
		            if(_local_+<+$API{ITKEY}{IT2KEY}{name}+>+ != NULL){
		                        free(_local_+<+$API{ITKEY}{IT2KEY}{name}+>+);
		            }
                +}}+
            +}}+
        +>>+
		 }
			 break;
+>>+
/* auto __ wishtoUseAPI IMPLEMENT_META_INTERFACE auto CGA end-------------------------------------------------*/

// auto CGA start : wishtoUseAPI
ITERATE %API +<<+ ITKEY  ITVALUE
	static bool handler_ITKEY(int32_t argc, char **argv);
+>>+
// auto CGA end : wishtoUseAPI




// example of programming in template (ex . $g_y)
ITERATE %API +<<+ ITKEY  ITVALUE

bool handler_ITKEY(int32_t argc, char **argv)   // +<+$g_y=-1+>+
{
    printMessage("ITKEY  \n");

    error_t result = E_OK;

    sp<I+<+ucfirst($MODULENAME)+>+ManagerService> g+<+$MODULENAME+>+Interface = interface_cast<I+<+ucfirst($MODULENAME)+>+ManagerService>
    (defaultServiceManager()->getService(String16("service_layer.+<+$MODULENAME+>+ManagerService")));

//Initialize
    ITERATE %API{ITKEY} +<<+ IT2KEY  IT2VALUE
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData") )+{{+
				ITERATE %xxData +<<+ ITKEY  ITVALUE
				        IFNOTEQUAL(+<+$xxData{ITKEY}{Len}+>+  ne "")+{{+
	+<+$xxData{ITKEY}{type}+>+ m+<+$xxData{ITKEY}{name}+>+;
				        +}}+
				        IFEQUAL(+<+$xxData{ITKEY}{Len}+>+  ne "")+{{+
	size_t m+<+$xxData{ITKEY}{Len}+>+;
	uint8_t m+<+$xxData{ITKEY}{name}+>+[BUFSIZ] = {0U,};
			    	    +}}+
				+>>+
            +}}+

            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData") )+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
	+<+$API{ITKEY}{IT2KEY}{type}+>+ +<+$API{ITKEY}{IT2KEY}{name}+>+;
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
	size_t +<+$API{ITKEY}{IT2KEY}{Len}+>+;
	+<+$API{ITKEY}{IT2KEY}{type}+>+ +<+$API{ITKEY}{IT2KEY}{name}+>+;
                +}}+
			+}}+
    +>>+

//Input
    ITERATE %API{ITKEY} +<<+ IT2KEY  IT2VALUE
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData") )+{{+
				ITERATE %xxData +<<+ ITKEY  ITVALUE
				        IFNOTEQUAL(+<+$xxData{ITKEY}{Len}+>+  ne "")+{{+
	m+<+$xxData{ITKEY}{name}+>+ = strtol(argv[+<+$g_y = plus($g_y,1)+>+], NULL, 16);
				        +}}+
				        IFEQUAL(+<+$xxData{ITKEY}{Len}+>+  ne "")+{{+
	m+<+$xxData{ITKEY}{Len}+>+ = strlen(argv[+<+$g_y = plus($g_y,1)+>+]);
			    	    +}}+
				+>>+
            +}}+

            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData") )+{{+






 IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
	+<+$API{ITKEY}{IT2KEY}{name}+>+ = strtol(argv[+<+$g_y = plus($g_y,1)+>+], NULL, 16);
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
	+<+$API{ITKEY}{IT2KEY}{Len}+>+ = strtol(argv[+<+$g_y = plus($g_y,1)+>+], NULL, 10);
	+<+$API{ITKEY}{IT2KEY}{name}+>+ = strtol(argv[+<+$g_y = plus($g_y,1)+>+], NULL, 16);
                +}}+
			+}}+
    +>>+


	ITERATE %API{ITKEY} +<<+ IT2KEY  IT2VALUE
	        IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData") )+{{+
	android::sp<+<+$MODULENAME+>+Data> new+<+$MODULENAME+>+Data = new +<+$MODULENAME+>+Data();
	uint8_t * tempbuf = new uint8_t[mdataLen];
	(void)std::memcpy(tempbuf, argv[+<+$g_y+>+], mdataLen);
	        +}}+


//xxdata buffer
	IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData") )+{{+
	  new+<+$MODULENAME+>+Data->setData(
		ITERATE %xxData +<<+ ITKEY  ITVALUE


		    IFEQUAL(ITKEY eq 1)+{{+
		        IFNOTEQUAL(+<+$xxData{ITKEY}{Len}+>+  ne "")+{{+
		            m+<+$xxData{ITKEY}{name}+>+
		        +}}+
		        IFEQUAL(+<+$xxData{ITKEY}{Len}+>+  ne "")+{{+
		            m+<+$xxData{ITKEY}{Len}+>+
		            , m+<+$xxData{ITKEY}{name}+>+
		        +}}+
		    +}}+
		    IFEQUAL(ITKEY ne 1)+{{+
		        IFNOTEQUAL(+<+$xxData{ITKEY}{Len}+>+  ne "")+{{+
		            ,m+<+$xxData{ITKEY}{name}+>+
		        +}}+
		        IFEQUAL(+<+$xxData{ITKEY}{Len}+>+  ne "")+{{+
		            , m+<+$xxData{ITKEY}{Len}+>+
		            , tempbuf
		        +}}+
		    +}}+
		+>>+
	    );
	+}}+
+>>+
//xxdata buffer

//Call API
	result = g+<+$MODULENAME+>+Interface->ITKEY(
    ITERATE %API{ITKEY} +<<+ IT2KEY  IT2VALUE
        IFEQUAL( (IT2KEY eq 1)&& (IT2KEY eq 1))+{{+
            IFEQUAL( ("+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData") )+{{+
     	new+<+$MODULENAME+>+Data
            +}}+
            IFEQUAL( ("+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData") )+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
      	+<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
       	+<+$API{ITKEY}{IT2KEY}{Len}+>+
      	, +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
            +}}+
        +}}+
        IFEQUAL(IT2KEY ne 1)+{{+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData" )+{{+
      	, new+<+$MODULENAME+>+Data
            +}}+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData" )+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
       	, +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
      	, +<+$API{ITKEY}{IT2KEY}{Len}+>+
     	, +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
            +}}+
        +}}+
    +>>+
	);

ITERATE %API{ITKEY} +<<+ IT2KEY  IT2VALUE
	IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData") )+{{+
	new+<+$MODULENAME+>+Data->toString();
	delete[] tempbuf;
            +}}+
    +>>+

    printMessage("OK");

    return true;
}
+>>+


ITERATE %Related_Manager +<<+ ITKEY  ITVALUE
IFEQUAL(+<+$Related_Manager{"ITKEY"}{VALUE}+>+  eq "O")+{{+
/* auto __ ITKEY Inheritance CGA start-------------------------------------------------*/
    case MSG_CONNECT_TO_+<+uc("ITKEY")+>+MGR:
        LOGV("handleMessage MSG_CONNECT_TO_+<+uc("ITKEY")+>+MGR");
        m+<+ucfirst($MODULENAME)+>+InputMgr.connectTo+<+$Related_Manager{"ITKEY"}{usingName}+>+Mgr();
        break;

	case MSG_RECEIVE_FROM_+<+uc("ITKEY")+>+:
		LOGV("handleMessage MSG_RECEIVE_FROM_+<+uc("ITKEY")+>+ sigID : %x", msg->arg1);
		//m+<+ucfirst($MODULENAME)+>+InputMgr.messagefrom+<+ucfirst("ITKEY")+>+((uint16_t)msg->arg1, buf);
		break;
/* auto __ ITKEY Inheritance CGA end-------------------------------------------------*/
+}}+
+>>+

/**
 *
 *  This is the +<+ucfirst($MODULENAME)+>+ Input Manager with msg handler and connector of related tiger managers.
 *
 * @cond UML
 * @startuml
 *    class +<+ucfirst($MODULENAME)+>+InputManager
 *    class +<+ucfirst($MODULENAME)+>+Handler
 *    class sl::Handler
 *    class android::RefBase
 *    class +<+ucfirst($MODULENAME)+>+InputMgrTimer
 *    class TimerTimeoutHandler
 *    class ServiceDeathRecipient
 *    class android::IBinder::DeathRecipient
 *    class +<+ucfirst($MODULENAME)+>+ManagerService
 *
 *    +<+ucfirst($MODULENAME)+>+InputManager *--  +<+ucfirst($MODULENAME)+>+ManagerService :  >
 *     +<+ucfirst($MODULENAME)+>+InputManager --> android::RefBase
 *     +<+ucfirst($MODULENAME)+>+InputManager *--  +<+ucfirst($MODULENAME)+>+Handler : mMyHandler >
 *     +<+ucfirst($MODULENAME)+>+Handler -->  sl::Handler
 *     +<+ucfirst($MODULENAME)+>+InputManager *--  +<+ucfirst($MODULENAME)+>+InputMgrTimer : m+<+ucfirst($MODULENAME)+>+InputMgrTimer >
 *     +<+ucfirst($MODULENAME)+>+InputMgrTimer --> TimerTimeoutHandler
 *     +<+ucfirst($MODULENAME)+>+InputManager *--  ServiceDeathRecipient : mServiceDeathRecipient >
 *     ServiceDeathRecipient -->  android::IBinder::DeathRecipient
 *    class BnSystemPostReceiver
 *    class SystemPostReceiver
 *     +<+ucfirst($MODULENAME)+>+InputManager *-up-  SystemPostReceiver : mSystemPostReceiver >
 *     SystemPostReceiver -up-> BnSystemPostReceiver : appmgr
IFEQUAL(+<+$Related_Manager{audio}{VALUE}+>+  eq "O")+{{+
 *    class audioReceiver
 *    class BnAudioReceiver
 *     +<+ucfirst($MODULENAME)+>+InputManager *-up-  audioReceiver : mAudioReceiver >
 *     audioReceiver -up-> BnAudioReceiver : audio
+}}+
IFEQUAL(+<+$Related_Manager{hmi}{VALUE}+>+  eq "O")+{{+
 *    class hmiReceiver
 *    class BnHMIEventReceiver
 *     +<+ucfirst($MODULENAME)+>+InputManager *-up-  hmiReceiver : mHmiReceiver >
 *     hmiReceiver -up-> BnHMIEventReceiver : HMI
+}}+
IFEQUAL(+<+$Related_Manager{vif}{VALUE}+>+  eq "O")+{{+
 *    class vifReceiver
 *    class BnvifManagerReceiver
 *     +<+ucfirst($MODULENAME)+>+InputManager *-up-  vifReceiver : mVifReceiver >
 *     vifReceiver -up-> BnvifManagerReceiver : vif
+}}+
 * @enduml
 * @endcond
 */



IFEQUAL(+<+$Related_Manager{vif}{VALUE}+>+  eq "O")+{{+
/* auto __ vif Inheritance CGA start-------------------------------------------------*/
#include "services/vifManagerService/IvifManagerService.h"
#include "services/vifManagerService/IvifManagerReceiver.h"
/* auto __ vif Inheritance CGA end-------------------------------------------------*/
+}}+

IFEQUAL(+<+$Related_Manager{system}{VALUE}+>+  eq "O")+{{+
/* auto __ system Inheritance CGA start-------------------------------------------------*/
#include "services/SystemManagerService/ISystemReceiver.h"
#include "services/SystemManagerService/ISystemManagerService.h"
/* auto __ system Inheritance CGA end-------------------------------------------------*/
+}}+

IFEQUAL(+<+$Related_Manager{hmi}{VALUE}+>+  eq "O")+{{+
/* auto __ hmi Inheritance CGA start-------------------------------------------------*/
#include <services/HMIManagerService/IHMIEventReceiver.h>
#include <services/HMIManagerService/IHMIManagerService.h>
#include <services/HMIManagerService/IHMIManagerServiceType.h>
/* auto __ hmi Inheritance CGA end-------------------------------------------------*/
+}}+

IFEQUAL(+<+$Related_Manager{loc}{VALUE}+>+  eq "O")+{{+
/* auto __ loc Inheritance CGA start-------------------------------------------------*/
#include <services/LocationManagerService/LocationData.h>
#include <services/LocationManagerService/ILocationReceiver.h>
#include <services/LocationManagerService/ILocationManagerService.h>
#include <services/LocationManagerService/ILocationManagerServiceType.h>
/* auto __ loc Inheritance CGA end-------------------------------------------------*/
+}}+

IFEQUAL(+<+$Related_Manager{diag}{VALUE}+>+  eq "O")+{{+
/* auto __ diag Inheritance CGA start-------------------------------------------------*/
#include <services/DiagManagerService/IDiagManagerService.h>
#include <services/DiagManagerService/IDiagManagerServiceType.h>
/* auto __ diag Inheritance CGA end-------------------------------------------------*/
+}}+

IFEQUAL(+<+$Related_Manager{audio}{VALUE}+>+  eq "O")+{{+
/* auto __ Audio Inheritance CGA start-------------------------------------------------*/
#include <services/AudioManagerService/IAudioManagerService.h>
#include <services/AudioManagerService/IAudioManagerServiceType.h>
/* auto __ Audio Inheritance CGA end-------------------------------------------------*/
+}}+




// wishtoUseAPI
ITERATE %API +<<+ ITKEY  ITVALUE
/**
 * @brief +<+$API{ITKEY}{1}{Description}+>+   
 *
 * It is the function for ITKEY in the +<+$MODULENAME+>+Manager.
 *
    ITERATE %API{ITKEY} +<<+ IT2KEY  IT2VALUE
            IFEQUAL("+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData")+{{+
 * @param[in] +<+$API{ITKEY}{IT2KEY}{name}+>+ +<+$API{ITKEY}{IT2KEY}{Description}+>+
            +}}+
            IFEQUAL("+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData")+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
 * @param[in]  +<+$API{ITKEY}{IT2KEY}{name}+>+ +<+$API{ITKEY}{IT2KEY}{Description}+>+
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
 * @param[in] +<+$API{ITKEY}{IT2KEY}{Len}+>+ Length of +<+$API{ITKEY}{IT2KEY}{name}+>+
 * @param[in] +<+$API{ITKEY}{IT2KEY}{name}+>+ +<+$API{ITKEY}{IT2KEY}{Description}+>+
                +}}+
            +}}+
+>>+
 * @retval   error_t   If this function works successfully, return E_OK, otherwise, return E_ERROR.
 *
 */
error_t +<+$MODULENAME+>+Manager::ITKEY(
    ITERATE %API{ITKEY} +<<+ IT2KEY  IT2VALUE
        IFEQUAL( (IT2KEY eq 1)&& (IT2KEY eq 1))+{{+
            IFEQUAL("+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData")+{{+
                    android::sp<+<+$MODULENAME+>+Data>& +<+$API{ITKEY}{IT2KEY}{name}+>+
            +}}+
            IFEQUAL("+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData")+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
                    +<+$API{ITKEY}{IT2KEY}{type}+>+ +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
                    size_t +<+$API{ITKEY}{IT2KEY}{Len}+>+
                    , +<+$API{ITKEY}{IT2KEY}{type}+>+ +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
            +}}+
        +}}+
        IFEQUAL(IT2KEY ne 1)+{{+
            IFEQUAL("+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData")+{{+
                    , android::sp<+<+$MODULENAME+>+Data>& +<+$API{ITKEY}{IT2KEY}{name}+>+
            +}}+
            IFEQUAL("+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData")+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
                    , +<+$API{ITKEY}{IT2KEY}{type}+>+ +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
                    , size_t +<+$API{ITKEY}{IT2KEY}{Len}+>+
                    , +<+$API{ITKEY}{IT2KEY}{type}+>+ +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
            +}}+
        +}}+
    +>>+
    )
{
    error_t result = E_OK;
    if (m+<+$MODULENAME+>+Service != NULL) {
        LOGV("interface ITKEY");
        m+<+$MODULENAME+>+Service->ITKEY(
    ITERATE %API{ITKEY} +<<+ IT2KEY  IT2VALUE
        IFEQUAL( (IT2KEY eq 1)&& (IT2KEY eq 1))+{{+
            IFEQUAL("+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData")+{{+
                    +<+$API{ITKEY}{IT2KEY}{name}+>+
            +}}+
            IFEQUAL("+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData")+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
                    +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
                    +<+$API{ITKEY}{IT2KEY}{Len}+>+
                    , +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
            +}}+
        +}}+
        IFEQUAL(IT2KEY ne 1)+{{+
            IFEQUAL("+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData")+{{+
                    , +<+$API{ITKEY}{IT2KEY}{name}+>+
            +}}+
            IFEQUAL("+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData")+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
                    , +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
                    , +<+$API{ITKEY}{IT2KEY}{Len}+>+
                    , +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
            +}}+
        +}}+
    +>>+
            );
        result = E_OK;
    }
    else {
        LOGE("+<+$MODULENAME+>+Manager ITKEY() fail : m+<+$MODULENAME+>+Service is empty");
        result = E_ERROR;
    }


	// CGA_VARIANT:+<+ucfirst($MODULENAME)+>+Manager:ITKEY() START
    /*
     * Write your own code
     */
	// CGA_VARIANT:+<+ucfirst($MODULENAME)+>+Manager:ITKEY() END

    return result;
}
+>>+




// CGA_VARIANT:+<+uc("$MODULENAME")+>+MANAGER_H:+<+uc("$MODULENAME")+>+MANAGER() START
    /*
     * Write your own code
     */
// CGA_VARIANT:+<+uc("$MODULENAME")+>+MANAGER_H:+<+uc("$MODULENAME")+>+MANAGER() END


// CGA_VARIANT:+<+ucfirst($MODULENAME)+>+ManagerService:unregisterReceiver START
    /*
     * Write your own code
     */
// CGA_VARIANT:+<+ucfirst($MODULENAME)+>+ManagerService:unregisterReceiver END


// CGA_VARIANT:+<+ucfirst($MODULENAME)+>+ManagerService:queryReceiverByID START
    /*
     * Write your own code
     */
// CGA_VARIANT:+<+ucfirst($MODULENAME)+>+ManagerService:queryReceiverByID END


// auto CGA start : wishtoUseAPI
ITERATE %API +<<+ ITKEY  ITVALUE
/**
 * @ingroup +<+uc($MODULENAME)+>+MGR_APIS
 * @brief API : +<+$API{"ITKEY"}{1}{"apiDescription"}+>+
 *
 * this funciton will be invoked when application or another services call this function through binder.
 *
 ITERATE %API{ITKEY} +<<+ IT2KEY  IT2VALUE
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData" )+{{+
 * @param[in] +<+$API{ITKEY}{IT2KEY}{name}+>+  +<+$API{ITKEY}{IT2KEY}{Description}+>+
            +}}+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData" )+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
 * @param[in] +<+$API{ITKEY}{IT2KEY}{name}+>+  +<+$API{ITKEY}{IT2KEY}{Description}+>+
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
 * @param[in] +<+$API{ITKEY}{IT2KEY}{Len}+>+ Length of +<+$API{ITKEY}{IT2KEY}{name}+>+
 * @param[in] +<+$API{ITKEY}{IT2KEY}{name}+>+  +<+$API{ITKEY}{IT2KEY}{Description}+>+
                +}}+
            +}}+
 +>>+
 * @retval   error_t     If the receiver is registered successfully, return E_OK, otherwise, return E_ERROR.
 *
 * @cond UML
 * @startuml
 *     box "Application (Proxy)\n Other Services"
 *     participant App
 *     participant Bp+<+ucfirst($MODULENAME)+>+ManagerService
 *     end box
 *     participant Binder
 *     box "Service (Native) - API"
 *     participant Bn+<+ucfirst($MODULENAME)+>+ManagerService
 *     participant ServiceStub
 *     end box
 *
 *     == +<+$API{"ITKEY"}{1}{"apiDescription"}+>+ ==
 *     App -> Bp+<+ucfirst($MODULENAME)+>+ManagerService : ITKEY(arguments)
 *     Bp+<+ucfirst($MODULENAME)+>+ManagerService -> Binder : +<+ucfirst($MODULENAME)+>+Data >> remote()->onTransact(OP_REGISTER_+<+uc(ITKEY)+>+, Parcel)
 *     Binder -> Bn+<+ucfirst($MODULENAME)+>+ManagerService : onTransact(uint32_t code, const Parcel& data,reply)\n OP_REGISTER_+<+uc(ITKEY)+>+, Parcel >> arguments
 *     Bn+<+ucfirst($MODULENAME)+>+ManagerService -> ServiceStub : ITKEY(arguments)
 *     activate ServiceStub
 *     Bn+<+ucfirst($MODULENAME)+>+ManagerService <- ServiceStub : return E_OK
 *     deactivate ServiceStub
 *     Binder <- Bn+<+ucfirst($MODULENAME)+>+ManagerService : reply->writeInt32
 *     Bp+<+ucfirst($MODULENAME)+>+ManagerService <- Binder : reply.readInt32()
 *     App <- Bp+<+ucfirst($MODULENAME)+>+ManagerService : return
 * @enduml
 * @endcond
 */
error_t +<+ucfirst($MODULENAME)+>+ManagerService::ServiceStub::ITKEY(
    ITERATE %API{ITKEY} +<<+ IT2KEY  IT2VALUE
        IFEQUAL( (IT2KEY eq 1)&& (IT2KEY eq 1))+{{+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData" )+{{+
                    android::sp<+<+$MODULENAME+>+Data>& +<+$API{ITKEY}{IT2KEY}{name}+>+
            +}}+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData" )+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
                    +<+$API{ITKEY}{IT2KEY}{type}+>+ +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
                    size_t +<+$API{ITKEY}{IT2KEY}{Len}+>+
                    , +<+$API{ITKEY}{IT2KEY}{type}+>+ +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
            +}}+
        +}}+
        IFEQUAL(IT2KEY ne 1)+{{+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData" )+{{+
                    , android::sp<+<+$MODULENAME+>+Data>& +<+$API{ITKEY}{IT2KEY}{name}+>+
            +}}+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData" )+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
                    , +<+$API{ITKEY}{IT2KEY}{type}+>+ +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
                    , size_t +<+$API{ITKEY}{IT2KEY}{Len}+>+
                    , +<+$API{ITKEY}{IT2KEY}{type}+>+ +<+$API{ITKEY}{IT2KEY}{name}+>+
                +}}+
            +}}+
        +}}+
    +>>+
    )
{
	LOGV("ServiceStub: ITKEY");

    ITERATE %API{ITKEY} +<<+ IT2KEY  IT2VALUE
        IFEQUAL( (IT2KEY eq 1)&& (IT2KEY eq 1))+{{+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData" )+{{+
	xxData->toString("ITKEY");
            +}}+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData" )+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
	LOGV("ITKEY : value =  %d", +<+$API{ITKEY}{IT2KEY}{name}+>+ );
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
	LOGV("ITKEY : value =  %d", +<+$API{ITKEY}{IT2KEY}{name}+>+ );
                +}}+
            +}}+
        +}}+
        IFEQUAL(IT2KEY ne 1)+{{+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  eq "xxData" )+{{+
	xxData->toString("ITKEY");
            +}}+
            IFEQUAL( "+<+$API{ITKEY}{IT2KEY}{type}+>+"  ne "xxData" )+{{+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  eq "")+{{+
	LOGV("ITKEY : value =  %d", +<+$API{ITKEY}{IT2KEY}{name}+>+ );
                +}}+
                IFEQUAL("+<+$API{ITKEY}{IT2KEY}{Len}+>+"  ne "")+{{+
	LOGV("ITKEY : value =  %d", +<+$API{ITKEY}{IT2KEY}{name}+>+ );
                +}}+
            +}}+
        +}}+
    +>>+

// CGA_VARIANT:+<+ucfirst($MODULENAME)+>+ManagerService::ServiceStub::ITKEY() START
    /*
     * Write your own code
     */
// CGA_VARIANT:+<+ucfirst($MODULENAME)+>+ManagerService::ServiceStub::ITKEY() END

	return E_OK;
}
+>>+
// auto CGA end : wishtoUseAPI

