stcI_HASH : Module_Name
stcI_FILEPREFIX : +<+lc(KEY)+>+-service/
stcI_FILEBODY : YES
stcI_FILEPOSTFIX : _test
stcI_EXTENSION : cpp
Set : $iterate_comments = OFF
SetI : $MODULENAME = KEY
stcI_MACRO_START : MACRO_1ARG(TT,TV)
====
    TT is mine.
    TV is yours.
---
stcI_MACRO_END
stcI_MACRO_START : MACRO_2ARG(TT2,TV2,KG3)
====
TT2
TV2
KG3
---
stcI_MACRO_END
stcI_MACRO_WORD  : MACRO_WORD_EX(TT,TV)   33TT == 4TV


/*
ITERATE %Author +<<+ ITKEY  ITVALUE
 * @author  ITKEY
+>>+
 * @date    +<+$VARIABLE{"Date"}+>+
 */

pp
__INLINEMACRO MACRO_1ARG(stcI_empty ,)        // Correct
pp
__INLINEMACRO MACRO_2ARG(,,)
pp
__INLINEMACRO MACRO_1ARG(ANY1, ANY2)
pp
__INLINEMACRO MACRO_ERROR(, ANY2 )            // ERROR : macro name is error
pp
__INLINEMACRO MACRO_2ARG(, ANY2 )            // ERROR : different argument count
pp

// CGA_VARIANT:__GLOBAL_SCOPE__:__YOUR_CODE__:variant START
    /*
     * Write your own additional code : __INMACRO<MACRO_WORD_EX(PP1,PP2)>
     * add your #include
     * add your global declare the : __INMACRO<MACRO_WORD_EX(PP1)>function and variables
     * add __INMACRO< MACRO_WORD_EX(PP1,PP2) >your function * add __INMACRO< MACRO_WORD_EX(PP3,PP4) >your function
     * add __INMACRO< MACRO_WORD_EX2(PP1,PP2)>your function
     * add __INMACRO< MACRO_WORD_EX(stcI_empty,PP2) >your function * add __INMACRO< MACRO_WORD_EX(,) >your function
     */
// CGA_VARIANT:__GLOBAL_SCOPE__:__YOUR_CODE__:variant END


